import random
import sqlite3
import requests
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup

print('Start telegram bot...')

# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('english_bot.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT,
        word_count INTEGER DEFAULT 0
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS words (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        word TEXT,
        translation TEXT,
        example TEXT,
        FOREIGN KEY (user_id) REFERENCES users (id)
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS word_history (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        word_id INTEGER,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id),
        FOREIGN KEY (word_id) REFERENCES words (id)
    )
''')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
state_storage = StateMemoryStorage()
token_bot = 'YOUR_BOT_TOKEN'
bot = TeleBot(token_bot, state_storage=state_storage)

known_users = []
userStep = {}
buttons = []


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used '/start' yet")
        return 0


@bot.message_handler(commands=['start'])
def start(message):
    cid = message.chat.id
    if cid not in known_users:
        known_users.append(cid)
        userStep[cid] = 0
        bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ. –ü—Ä–∏—á—ë–º —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï' –∏–ª–∏ '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'. –ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è")


@bot.message_handler(commands=['cards'])
def create_cards(message):
    cid = message.chat.id
    if cid not in known_users:
        known_users.append(cid)
        userStep[cid] = 0
        bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ. –ü—Ä–∏—á—ë–º —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï' –∏–ª–∏ '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'. –ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è")

    markup = types.ReplyKeyboardMarkup(row_width=2)
    target_word = 'Peace'
    translate = '–ú–∏—Ä'
    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    others = ['Green', 'White', 'Hello', 'Car']
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])
    markup.add(*buttons)
    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.chat.id, MyStates.target_word)

    with bot.retrieve_data(message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    with bot.retrieve_data(message.chat.id) as data:
        target_word = data['target_word']
        cursor.execute('DELETE FROM words WHERE user_id=? AND word=?', (message.chat.id, target_word))
        conn.commit()
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{target_word}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    userStep[cid] = 1
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥'.")


@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 1)
def save_new_word(message):
    cid = message.chat.id
    userStep[cid] = 0
    word_data = message.text.split(' - ')
    if len(word_data) != 2:
        bot.send_message(cid, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return
    word, translation = word_data
    example = get_word_example(word)
    cursor.execute('INSERT INTO words (user_id, word, translation, example) VALUES (?, ?, ?, ?)',
                   (cid, word, translation, example))
    conn.commit()
    cursor.execute('SELECT COUNT(*) FROM words WHERE user_id=?', (cid,))
    word_count = cursor.fetchone()[0]
    cursor.execute('UPDATE users SET word_count=? WHERE id=?', (word_count, cid))
    conn.commit()
    bot.send_message(cid, f"–°–ª–æ–≤–æ '{word}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {word_count} —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ.")


def get_word_example(word):
    response = requests.get(f'https://api.dictionaryapi.dev/api/v2/entries/en/{word}')
    data = response.json()
    example = data[0]['meanings'][0]['definitions'][0]['example']
    return example


bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(skip_pending=True)
